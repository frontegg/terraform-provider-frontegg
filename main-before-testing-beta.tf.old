terraform {
  required_providers {
    frontegg = {
      source = "frontegg/frontegg"
    }
  }
}

provider "frontegg" {

  client_id      = "38513ed6-5203-4663-b44c-570ca521e407"
  secret_key     = "a76abbbd-103b-49cc-990f-19a9874cfa8e"
  environment_id = "1c33af52-6860-4476-b592-39fce43d3bf1"

  api_base_url    = "https://api.stg.frontegg.com"
  portal_base_url = "https://frontegg-portal.stg.frontegg.com"
}

resource "frontegg_auth_policy" "example" {
  allow_unverified_users           = true
  allow_signups                    = true
  enable_api_tokens                = true
  enable_roles                     = true
  jwt_algorithm                    = "RS256"
  machine_to_machine_auth_strategy = "ClientCredentials"
  jwt_access_token_expiration      = 86400   # 1 day
  jwt_refresh_token_expiration     = 2592000 # 30 days
  same_site_cookie_policy          = "strict"
  auth_strategy                    = "Code"
  allow_tenant_invitations         = false
}

resource "frontegg_email_template" "example" {
  template_type        = "EmailVerification"
  from_name            = "Your Company"
  html_template        = "Your Company"
  redirect_url         = "https://test.frontegg.com"
  success_redirect_url = "https://test.frontegg.com"
  from_address         = "hello@frontegg.com"
  subject              = "Email Verification"
}

resource "frontegg_social_login" "google_social_login" {
  provider_name     = "google"
  client_id         = "not-used"
  redirect_url      = "https://app-zyowmq7pig6g.stg.frontegg.com/account/social/success"
  secret            = "not-used"
  customised        = true
  additional_scopes = ["email", "profile"]
}

resource "frontegg_workspace" "example" {
  name                = "Your Company"
  country             = "US"
  backend_stack       = "Python"
  frontend_stack      = "React"
  open_saas_installed = false

  frontegg_domain = "app-74d0t067n5p5.stg.frontegg.com"
  allowed_origins = ["https://test.frontegg.com"]

  mfa_policy {
    allow_remember_device = true
    device_expiration     = 604800 # 7 days
    enforce               = "unless-saml"
  }

  oidc {
    redirect_url = "http://localhost:3000"
  }

  mfa_authentication_app {
    service_name = "Your Company"
  }

  lockout_policy {
    max_attempts = 10
  }

  password_policy {
    allow_passphrases = false
    min_length        = 10
    max_length        = 128
    min_tests         = 2
    min_phrase_length = 6
    history           = 2
  }

  hosted_login {
    allowed_redirect_urls = [
      "http://test.frontegg.com",
    ]
  }

}

resource "frontegg_admin_portal" "admin_portal" {
  admin_portal_theme_name    = "dark"
  login_box_theme_name       = "dark"
  enable_groups              = true
  enable_provisioning        = true
  enable_account_settings    = true
  enable_api_tokens          = true
  enable_audit_logs          = true
  enable_personal_api_tokens = true
  enable_privacy             = true
  enable_profile             = true
  enable_roles               = true
  enable_security            = true
  enable_sso                 = true
  enable_subscriptions       = true
  enable_usage               = true
  enable_users               = true
  enable_webhooks            = true

  palette_admin_portal {
    error {
      contrast_text = "#eeeef0"
      dark          = "#ae402c"
      light         = "#FFEEEA"
      main          = "#E1583E"
    }
    info {
      contrast_text = "#FFA500"
      dark          = "#FFA500"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    primary {
      active        = "#FFA500"
      contrast_text = "#FFA500"
      dark          = "#43BB7A"
      hover         = "#32A265"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    secondary {
      active        = "#FFA500"
      contrast_text = "#FFA500"
      dark          = "#E6ECF4"
      hover         = "#F0F3F8"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    success {
      contrast_text = "#eeeef0"
      dark          = "#1d7c30"
      light         = "#E1F5E2"
      main          = "#2CA744"
    }
    warning {
      contrast_text = "#eeeef0"
      dark          = "#EAE1C2"
      light         = "#F9F4E2"
      main          = "#A79D7B"
    }
  }
  palette_login_box {

    error {
      contrast_text = "#eeeef0"
      dark          = "#ae402c"
      light         = "#FFEEEA"
      main          = "#E1583E"
    }
    info {
      contrast_text = "#FFA500"
      dark          = "#FFA500"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    primary {
      active        = "#FFA500"
      contrast_text = "#FFA500"
      dark          = "#43BB7A"
      hover         = "#32A265"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    secondary {
      active        = "#FFA500"
      contrast_text = "#FFA500"
      dark          = "#E6ECF4"
      hover         = "#F0F3F8"
      light         = "#43BB7A"
      main          = "#FFA500"
    }
    success {
      contrast_text = "#eeeef0"
      dark          = "#1d7c30"
      light         = "#E1F5E2"
      main          = "#2CA744"
    }
    warning {
      contrast_text = "#eeeef0"
      dark          = "#EAE1C2"
      light         = "#F9F4E2"
      main          = "#A79D7B"
    }
  }

}

resource "frontegg_webhook" "example" {
  enabled     = true
  name        = "Example webhook"
  description = "An example of a webhook"
  url         = "https://example.com/webhook"
  secret      = "example-secret"
  events = [
    "frontegg.user.authenticated"
  ]
}

resource "frontegg_tenant" "example_tenant" {
  key  = "tenant-key3"
  name = "Example Tenant"
}

resource "frontegg_role" "test_role" {
  key            = "terraform-test-role-2"
  name           = "Terraform Test Role-2"
  description    = "A test role created via Terraform"
  default        = false
  level          = 1
  permission_ids = []
}

resource "frontegg_application" "test_app" {
  name           = "Test Application"
  description    = "Application for testing tenant assignment"
  app_url        = "https://test-app.example.com"
  login_url      = "https://test-app.example.com/login"
  type           = "web"
  frontend_stack = "react"
  is_active      = true
  is_default     = false
  access_type    = "FREE_ACCESS"
}

resource "frontegg_application_tenant_assignment" "test_assignment" {
  app_id    = frontegg_application.test_app.id
  tenant_id = frontegg_tenant.example_tenant.key
}

# Auth0 User Source Example - Testing static tenant config
resource "frontegg_auth0_user_source" "auth0_example" {
  name                 = "Auth0 User Source Updated"
  description          = "Updated Auth0 integration for SSO"
  index                = 1
  app_ids              = [frontegg_application.test_app.id]
  domain               = "your-tenant.auth0.com"
  client_id            = "auth0-client-id"
  secret               = "auth0-client-secret"
  sync_on_login        = true
  is_migrated          = false
  tenant_resolver_type = "static"
  tenant_id            = frontegg_tenant.example_tenant.key
}

# Cognito User Source Example - Testing dynamic tenant config
resource "frontegg_cognito_user_source" "cognito_example" {
  name                 = "Cognito User Source Updated"
  description          = "Updated AWS Cognito integration for SSO"
  index                = 2
  app_ids              = [frontegg_application.test_app.id]
  region               = "us-east-1"
  client_id            = "cognito-app-client-id"
  user_pool_id         = "us-east-1_abcdefghi"
  access_key_id        = "AKIAIOSFODNN7EXAMPLE"
  secret_access_key    = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  client_secret        = "app-client-secret"
  sync_on_login        = true
  is_migrated          = false
  tenant_resolver_type = "dynamic"
  tenant_id_field_name = "custom:tenant_id"
}

# Firebase User Source Example - Testing new tenant config
resource "frontegg_firebase_user_source" "firebase_example" {
  name                        = "Firebase User Source Updated"
  description                 = "Updated Firebase integration for SSO"
  index                       = 3
  app_ids                     = [frontegg_application.test_app.id]
  api_key                     = "your-firebase-web-api-key"
  service_account_type        = "service_account"
  project_id                  = "your-firebase-project-id"
  private_key_id              = "private-key-id"
  private_key                 = "-----BEGIN PRIVATE KEY-----\nEXAMPLEKEY\n-----END PRIVATE KEY-----\n"
  client_email                = "firebase-adminsdk@your-project.iam.gserviceaccount.com"
  client_id                   = "client-id-example"
  auth_uri                    = "https://accounts.google.com/o/oauth2/auth"
  token_uri                   = "https://oauth2.googleapis.com/token"
  auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
  client_x509_cert_url        = "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk%40your-project.iam.gserviceaccount.com"
  universe_domain             = "googleapis.com"
  sync_on_login               = true
  is_migrated                 = false
  tenant_resolver_type        = "new"
}

# Custom Code User Source Example - Testing dynamic tenant config
resource "frontegg_custom_code_user_source" "custom_code_example" {
  name                  = "Custom Code User Source"
  description           = "Updated custom authentication implementation"
  index                 = 4
  app_ids               = [frontegg_application.test_app.id]
  code_payload          = <<EOT
/**
 * Custom authentication code
 * @param {Object} data - The authentication request data
 * @returns {Object} - The authentication response
 */
function authenticate(data) {
  // Your custom authentication logic here
  if (data.username === 'test' && data.password === 'password') {
    return {
      id: '12345',
      email: 'test@example.com',
      name: 'Test User Updated',
      metadata: {
        role: 'admin',
        department: 'engineering'
      }
    };
  }

  throw new Error('Authentication failed');
}
  EOT
  get_user_code_payload = <<EOT
  /**
  * Get user details
  * @param {Object} data - The user request data
  * @returns {Object} - The user information
  */
  function getUser(data) {
    // Your custom user retrieval logic here
    return {
      id: data.userId,
      email: `bbb@example.com`,
      name: `User bbb`,
      metadata: {
        role: 'user'
      }
    };
  }
  EOT
  sync_on_login         = true
  is_migrated           = false
  tenant_resolver_type  = "dynamic"
  tenant_id_field_name  = "custom:tenant_id"
}

# Permission Category for Analytics permissions
resource "frontegg_permission_category" "analytics_category" {
  name        = "Analytics2"
  description = "Permissions related to analytics features"
}

# Permissions for Analytics features
resource "frontegg_permission" "analytics_view" {
  name        = "View Analytics2"
  key         = "analytics.view.2"
  description = "Permission to view analytics dashboards and reports"
  category_id = frontegg_permission_category.analytics_category.id
}

resource "frontegg_permission" "analytics_export" {
  name        = "Export Analytics2"
  key         = "analytics.export.2"
  description = "Permission to export analytics data to external formats"
  category_id = frontegg_permission_category.analytics_category.id
}


resource "frontegg_feature" "analytics_feature" {
  name        = "Analytics Dashboard"
  key         = "analytics-dashboard"
  description = "Standard analytics dashboard with basic reporting capabilities"
  metadata = jsonencode({
    category   = "analytics"
    tier       = "standard"
    maxReports = 25
  })
  permissions {
    permission_id  = frontegg_permission.analytics_view.id
    permission_key = frontegg_permission.analytics_view.key
  }
}

# Plan resources examples
resource "frontegg_plan" "basic_plan" {
  name                    = "Basic Plan"
  description             = "Basic plan with limited features"
  default_treatment       = "true"
  assign_on_signup        = true
  default_time_limitation = 30 # 30 days
}
