# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - name: Unshallow
        run: git fetch --prune
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Extract and Increment Version
        id: increment_version
        run: |
          TAG=${GITHUB_REF##*/}
          # Strip the "v" prefix if it exists and split the version into components
          VERSION=${TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment the patch version by 1
          PATCH=$((PATCH + 1))

          # Create the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          # Export the new version to the environment
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
  
      - name: Update version in GNUmakefile
        run: |
          sed -i "s|\(/registry.terraform.io/frontegg/frontegg/\)[^/]*|\1${{ env.NEW_VERSION }}|" GNUmakefile
  
      - name: Commit updated GNUmakefile
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am "Update GNUmakefile version to ${{ env.NEW_VERSION }}"
          git push
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5.1.0
        with:
          version: '~> v1'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
