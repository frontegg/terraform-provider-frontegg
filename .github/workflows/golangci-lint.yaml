name: golangci-lint
on:
  push:
    branches:
      - master
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21.11"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.59.1

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --timeout=5m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"
      - name: Extract and Increment Version
        id: increment_version
        run: |
            TAG=${GITHUB_REF##*/}
            # Strip the "v" prefix if it exists and split the version into components
            VERSION=${TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
  
            # Increment the patch version by 1
            PATCH=$((PATCH + 1))
  
            # Create the new version
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
  
            # Export the new version to the environment
            echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
    
      - name: Update version in GNUmakefile
        run: |
            sed -i "s|\(/registry.terraform.io/frontegg/frontegg/\)[^/]*|\1${{ env.NEW_VERSION }}|" GNUmakefile
    
      - name: Commit updated GNUmakefile
        run: |
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -am "Update GNUmakefile version to ${{ env.NEW_VERSION }}"
            git push
